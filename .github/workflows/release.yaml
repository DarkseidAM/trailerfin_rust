name: Build and Release (Binaries + Docker)

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build binaries for multiple platforms
  build-binaries:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install musl tools and cross-compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools gcc-aarch64-linux-gnu

      - name: Configure linker (only for aarch64)
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          mkdir -p ~/.cargo
          echo '[target.aarch64-unknown-linux-musl]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

      - name: Run Tests
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: RUST_TEST_THREADS=1 cargo test --target=${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target=${{ matrix.target }} --locked

      - name: Package as tar.gz
        run: |
          mkdir -p dist
          BIN=target/${{ matrix.target }}/release/trailerfin_rust
          if [ ! -f "$BIN" ]; then
            echo "‚ùå Binary not found: $BIN"
            exit 1
          fi
          cp "$BIN" dist/
          cd dist
          chmod +x ./trailerfin_rust
          tar -czf trailerfin_rust-${{ matrix.target }}.tar.gz trailerfin_rust
          cd ..

      - uses: actions/upload-artifact@v4
        with:
          name: trailerfin_rust-${{ matrix.target }}
          path: dist/trailerfin_rust-${{ matrix.target }}.tar.gz

  # Build and push Docker images
  build-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max



  # Create GitHub release with binaries
  create-release:
    needs: [build-binaries, build-docker]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Flatten artifacts
        run: |
          mkdir -p upload
          find dist -name '*.tar.gz' -exec mv {} upload/ \;

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: upload/*.tar.gz
          body: |
            ## üöÄ Release ${{ github.ref_name }}
            
            ### üì¶ Binaries
            - `trailerfin_rust-x86_64-unknown-linux-musl.tar.gz` - Linux x86_64
            - `trailerfin_rust-aarch64-unknown-linux-musl.tar.gz` - Linux ARM64
            
            ### üê≥ Docker Images
            - `ghcr.io/${{ github.repository }}:${{ github.ref_name }}`
            - `ghcr.io/${{ github.repository }}:latest`
            
            ### üîß Usage
            ```bash
            # Binary
            tar -xzf trailerfin_rust-x86_64-unknown-linux-musl.tar.gz
            ./trailerfin_rust
            
            # Docker
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
